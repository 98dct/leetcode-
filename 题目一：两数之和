题目1：给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出和为目标值 target的那两个整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。

举例：
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

输入：nums = [3,2,4], target = 6
输出：[1,2]

解法1：双重for循环
vector<int> twoSum(vector<int>& nums, int target) {
        

        for(int i = 0;i < nums.size()-1;i++){
            for(int j = i+1;j < nums.size();j++){
                if(nums[i]+nums[j] == target){
                    return {i,j};
                }
            }
        }

        return {};
}

时间复杂度：O(n*n)
空间复杂度：O(1)


解法2：unordered_map记录遍历的结果
vector<int> twoSum(vector<int>& nums, int target) {
        //hashmap
        unordered_map<int,int> map;
        for(int i = 0;i < nums.size();i++){

            if(map.count(target-nums[i])){
                return {map[target-nums[i]],i};
            }
            map[nums[i]] = i;
        }

        return {};
}

时间复杂度：O(n)
空间复杂度：O(n)
